#!/usr/bin/env bash

set -euo pipefail

function common() {
	# Upgrade to latest
	sudo apt-get update && sudo apt-get -y full-upgrade

	# git
	sudo apt-get install -y git

	# cmake
	sudo apt-get install -y cmake

	# common
	sudo apt-get install -y make build-essential libssl-dev wget curl llvm

	# c/c++
	sudo apt install clang clangd clang-format lldb

	# dotfiles
	dest_dotfiles="$HOME/.config/dotfiles"
	if [ ! -d "$dest_dotfiles" ]; then
		git clone https://github.com/kohei-noda-qcrg/dotfiles "$dest_dotfiles"
	fi
	GIT_USERNAME=${GIT_USERNAME:-} GIT_EMAIL=${GIT_EMAIL:-} "$dest_dotfiles/pre-setup"
	"$dest_dotfiles/setup"
	. "$HOME/.bashrc"

	# Install rust by using rustup
	if [ ! -d ~/.cargo ]; then
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
	fi
	. $HOME/.cargo/env

	# uv
	curl -LsSf https://astral.sh/uv/install.sh | sh
	python3_ver="3.12.5"
	uv tool update-shell
	uv python install --default --preview "$python3_ver" # Install $python3_ver Python to ~/.local/bin
	pkgs=(pytest black flake8 numpy jupyterlab)
	for pkg in "${pkgs[@]}"; do
		uv tool install "${pkg}"
	done

	# volta
	if [ ! -d ~/.volta ]; then
		curl https://get.volta.sh | bash
		export VOLTA_HOME="$HOME/.volta"
		export PATH="$VOLTA_HOME/bin:$PATH"
		volta install node
	fi

	# neovim
	sudo apt-get install -y neovim

	# docker
	## Add Docker's official GPG key:
	sudo apt-get update
	sudo apt-get install ca-certificates curl
	sudo install -m 0755 -d /etc/apt/keyrings
	sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
	sudo chmod a+r /etc/apt/keyrings/docker.asc
	## Add the repository to Apt sources:
	echo \
	  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
	  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
	  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
	sudo apt-get update
	sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
	sudo usermod -aG docker $USER

	# GitHub CLI
	(type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
	&& sudo mkdir -p -m 755 /etc/apt/keyrings \
        && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
        && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
	&& sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
	&& echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
	&& sudo apt update \
	&& sudo apt install gh -y

	# fzf
	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install --all

	# Install mysql
	sudo apt-get install -y mysql-server
}

function wsl() {
	# Add /etc/sudoers entry
	echo "%sudo ALL=NOPASSWD: /usr/sbin/service mysql start" | sudo tee -a /etc/sudoers

	if [ ! -f $SCRIPT_DIR/checkpoint/wsl ]; then
		echo "sudo service mysql start" >>$HOME/.bashrc
		touch $SCRIPT_DIR/checkpoint/wsl
	fi
}

function linux() {
	# mozc
	sudo apt-get install -y fcitx-mozc

	# Install VSCode (https://code.visualstudio.com/docs/setup/linux#_debian-and-ubuntu-based-distributions)
	sudo apt-get install wget gpg apt-transport-https -y
	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
	sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
	echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null
	rm -f packages.microsoft.gpg
	sudo apt-get update && sudo apt-get install code -y
}

function hpc() {
	# Environment Modules
	sudo apt-get install -y environment-modules
	if [ ! -f $SCRIPT_DIR/checkpoint/hpc ]; then
		echo ". /usr/share/modules/init/bash" >>~/.bashrc
		echo 'module use "/opt/intel/oneapi/modulefiles"' >>~/.bashrc
		touch $SCRIPT_DIR/checkpoint/hpc
	fi
	if [ ! -f $SCRIPT_DIR/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB ]; then
		wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
	fi
	sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
	echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
	sudo apt-get update
	sudo apt-get install -y intel-oneapi-compiler-fortran intel-oneapi-openmp intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-mkl intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
	sudo /opt/intel/oneapi/modulefiles-setup.sh --force
}

function vscode_install_extensions() {
	##############################
	# Install VScode extensions
	##############################

	# WSL and Remote-ssh and Remote-containers support
	code --install-extension ms-vscode-remote.vscode-remote-extensionpack --force

	# Utils
	code --install-extension formulahendry.code-runner --force             # Execute script extension
	code --install-extension streetsidesoftware.code-spell-checker --force # check English Spell
	code --install-extension timonwong.shellcheck --force                  # Powerful support for syntax error of shell scripts
	code --install-extension mads-hartmann.bash-ide-vscode --force         # Powerful support for bash script
	code --install-extension usernamehw.errorlens --force                  # Whether or not you hover over the error line, highlight errors
	code --install-extension PKief.material-icon-theme --force             # Change Vscode explorer icons
	code --install-extension IBM.output-colorizer --force                  # Colorize output file
	code --install-extension shardulm94.trailing-spaces --force            # Detect end of line spaces and highlight these
	code --install-extension mosapride.zenkaku --force                     # Detect Zenkaku characters and highlight these
	code --install-extension sgryjp.japanese-word-handler --force          # Japanese word jump extension
	code --install-extension ms-vscode.hexeditor --force                   # Binary viewer
	code --install-extension EditorConfig.EditorConfig --force             # Force code rules

	# C/C++
	code --install-extension ms-vscode.cpptools-extension-pack --force

	# Rust
	code --install-extension rust-lang.rust-analyzer --force  # Rust language support
	code --install-extension tamasfe.even-better-toml --force # TOML language support

	# Git
	code --install-extension mhutchie.git-graph --force      # View git history as a graphical tree
	code --install-extension donjayamanne.githistory --force # Add convenient features to Vscode Source control tab
	code --install-extension eamodio.gitlens --force         # Visualize code authorship and so on

	# GitHub
	code --install-extension GitHub.vscode-pull-request-github --force # Pull request and issues support for Github
	code --install-extension GitHub.copilot --force                    # AI code completion

	# Markdown
	code --install-extension yzane.markdown-pdf --force             # Convert Markdown to pdf
	code --install-extension DavidAnson.vscode-markdownlint --force # Markdown linter
}

function print_usage() {
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "  --wsl: Install for WSL"
	echo "  --hpc: Install HPC tools (Environment Modules, Intel oneAPI)"
	echo "  --help | -h: Show this help"
}

while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	--wsl)
		WSL=true
		shift
		;;
	--hpc)
		HPC=true
		shift
		;;
	--help | -h)
		print_usage
		exit 0
		;;
	*)
		echo "Unknown option: $key"
		print_usage
		exit 1
		;;
	esac
done

# Main process
SCRIPT_DIR=$(
	cd "$(dirname "$0")"
	pwd
)
mkdir -p $SCRIPT_DIR/checkpoint
common
if [ -n "${WSL:-}" ]; then
	wsl
else
	linux
fi
if [ -n "${HPC:-}" ]; then
	hpc
fi
vscode_install_extensions

echo "Finish setup script successfully. Reboot your machine to apply settings."
